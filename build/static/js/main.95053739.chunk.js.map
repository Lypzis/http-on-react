{"version":3,"sources":["axios.js","components/Post/Post.js","containers/Blog/FullPost/FullPost.js","containers/Blog/Posts/Posts.js","containers/Blog/NewPost/NewPost.js","components/Routes/Routes.js","containers/Blog/Blog.js","App.js","registerServiceWorker.js","index.js"],"names":["instance","axios","create","baseURL","defaults","headers","common","post","props","react_default","a","createElement","className","onClick","clicked","title","author","FullPost","state","loadedPost","deletePostHandler","delete","concat","_this","match","params","id","then","response","console","log","catch","err","this","loadData","get","setState","data","_context3","t0","style","textAlign","body","Component","Posts","posts","postSelectedHandler","history","push","pathname","slice","updatedPosts","map","Object","objectSpread","_context","_this2","Post_Post","key","bind","react_router","path","url","exact","component","NewPost","content","postDataHandler","type","value","onChange","event","target","rows","routes","Blog","react_router_dom","to","hash","search","Routes","App","containers_Blog_Blog","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.95053739.chunk.js","sourcesContent":["import axios from  'axios';\n\n// A file just for setting up axios :D\n// Creates an Axios instance\nconst instance = axios.create({\n    // Global default base URL, now to referece, all that will be needed \n    // is the last part of the URL when making requests\n    // e.g.: 'https://jsonplaceholder.typicode.com/posts' ==> '/posts'\n    baseURL: 'https://jsonplaceholder.typicode.com'\n});\n\ninstance.defaults.headers.common['Authorization'] = 'AUTH TOKEN FROM INSTACE';\ninstance.defaults.headers.post['Content-Type'] = 'application/json';\n\n// Axios request interceptor\n// const requestInterceptor = \n/*\ninstance.interceptors.request.use(request => {\n    console.log(request);\n\n    // Edit request config, e.g.: headers.\n    return request;\n}, err => { // This second part handles errors\n    console.log(err);\n\n    return Promise.reject(err);\n});\n\n// const responseIntercetor = \n\ninstance.interceptors.response.use(response => {\n    console.log(response);\n\n    // Edit response config, e.g.: headers.\n    return response;\n}, err => { // This second part handles errors\n    console.log(err);\n\n    return Promise.reject(err);\n});\n\n    will get rid of the interceptors: \n    instance.interceptors.request.eject(requestInterceptor);\n    instance.interceptors.request.eject(responseInterceptor);\n*/\n\nexport default instance;","import React from 'react';\n//import { withRouter } from 'react-router-dom'; // way of getting all routing related props from component\n\nimport './Post.css';\n\nconst post = (props) => {\n\n    return (\n        <article className=\"Post\" onClick={props.clicked}>\n            <h1>{props.title}</h1>\n            <div className=\"Info\">\n                <div className=\"Author\">{props.author}</div>\n            </div>\n        </article>\n    );\n};\n\nexport default post; // withRouter(post)","import React, { Component } from 'react';\nimport axios from '../../../axios';\n\nimport './FullPost.css';\n\nclass FullPost extends Component {\n\n    state = {\n        loadedPost: null\n    }\n\n    /**\n     * Sends a GET request for the 'post' data.\n     * - Will firstly verify if an 'id' is available,\n     * then, checks if there is no loadedPost OR\n     * if there is a loadedPost AND its 'id' is different \n     * from the current 'id' available.\n     * - These verifications will make sure that it won't \n     * become an infinite loop( only in case of 'componentDidUpdate') nor the same post will reaload.\n     */\n    async componentDidMount() {\n        this.loadData();\n    }\n\n    async componentDidUpdate() {\n        this.loadData();\n    }\n\n    async loadData() {\n        if (this.props.match.params.id)\n            if (!this.state.loadedPost ||\n                (this.state.loadedPost && this.state.loadedPost.id !== +this.props.match.params.id))  // the '+' converts the id string to a number :D\n                try {\n                    const response = await axios.get(`/posts/${this.props.match.params.id}`);\n\n                    this.setState({ loadedPost: response.data });\n\n                } catch (err) {\n                    console.log('[FullPost.js] has something wrong! ' + err);\n                }\n    }\n\n    deletePostHandler = () => {\n        axios.delete(`/posts/${this.props.match.params.id}`)\n            .then(response => {\n                console.log(response);\n            })\n            .catch(err => {\n                console.log('[FullPost.js] has something wrong! ' + err);\n            });\n    };\n\n    render() {\n        let post = null;\n\n        if (this.props.match.params.id)\n            post = <p style={{ textAlign: 'center' }}>Loading...!</p>;\n\n        if (this.state.loadedPost)\n            post = (\n                <div className=\"FullPost\">\n                    <h1>{this.state.loadedPost.title}</h1>\n                    <p>{this.state.loadedPost.body}</p>\n                    <div className=\"Edit\">\n                        <button className=\"Delete\" onClick={this.deletePostHandler}>Delete</button>\n                    </div>\n                </div>\n\n            );\n        return post;\n    }\n}\n\nexport default FullPost;","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport axios from '../../../axios';\n\nimport Post from '../../../components/Post/Post';\nimport FullPost from '../FullPost/FullPost';\n\nimport './Posts.css';\n\nclass Posts extends Component {\n\n    state = {\n        posts: []\n    }\n\n    // Best place in React to make http requests 'componentDidMount' :D\n    async componentDidMount() {\n\n        console.log(this.props);\n\n        try {\n            // GET request to the API\n            const response = await axios.get('/posts');\n\n            // will hold only the first four posts from the retrieved data\n            const posts = response.data.slice(0, 4);\n\n            const updatedPosts = posts.map(post => {\n                // adding author to the current information of each updatedPosts\n                return {\n                    ...post,\n                    author: 'Mad Marcio'\n                };\n            });\n\n            this.setState({ posts: updatedPosts });\n        } catch (err) {\n            console.log('[Blog.js] has something wrong! ' + err);\n            // this.setState({ error: true });\n        }\n    }\n\n    postSelectedHandler = id => {\n        // this will redirect to a new path and add it to 'history'\n        this.props.history.push({ pathname: `/posts/${id}` });\n    }\n\n    render() {\n        let posts = <p style={{ textAlign: 'center' }}>Sorry, the posts weren't found!</p>\n\n        posts = this.state.posts.map(post => {\n            return (\n                <Post\n                    key={post.id}\n                    title={post.title}\n                    author={post.author}\n                    clicked={this.postSelectedHandler.bind(this, post.id)} />\n            );\n        });\n\n        return (\n            <div>\n                <section className=\"Posts__topics\">\n                    {posts}\n                </section>\n                 {/* ':name' is a special dynamic property(route parameter),\n                        since we need to retrieve a specific FullPost.\n                    Nested route*/}\n                <Route path={`${this.props.match.url}/:id`} exact component={FullPost} />\n            </div>\n        );\n    }\n}\n\nexport default Posts;","import React, { Component } from 'react';\nimport axios from '../../../axios';\n\nimport './NewPost.css';\n\nclass NewPost extends Component {\n    state = {\n        title: '',\n        content: '',\n        author: 'Max'\n    }\n\n    componentDidMount() {\n        //console.log(this.props);\n    }\n\n    postDataHandler = () => {\n        const post = {\n            title: this.state.title,\n            body: this.state.content,\n            author: this.state.author\n        }\n\n        axios.post('/posts', post)\n            .then(response => {\n                console.log(response);\n            })\n            .catch(err => {\n                console.log('[NewPost.js] has something wrong! ' + err);\n            });\n    }\n\n    render() {\n        return (\n            <div className=\"NewPost\">\n                <h1>Add a Post</h1>\n                <label>Title</label>\n                <input type=\"text\" value={this.state.title} onChange={(event) => this.setState({ title: event.target.value })} />\n                <label>Content</label>\n                <textarea rows=\"4\" value={this.state.content} onChange={(event) => this.setState({ content: event.target.value })} />\n                <label>Author</label>\n                <select value={this.state.author} onChange={(event) => this.setState({ author: event.target.value })}>\n                    <option value=\"Max\">Max</option>\n                    <option value=\"Manu\">Manu</option>\n                </select>\n                <button onClick={this.postDataHandler}>Add Post</button>\n            </div>\n        );\n    }\n}\n\nexport default NewPost;","import React from 'react';\n// Switch will make sure that only one route is shown on the screen\nimport { Route, Switch } from 'react-router-dom'; // NavLink instead of just Link is for inline-shit-styles, which I will not add\n\nimport Posts from '../../containers/Blog/Posts/Posts';\nimport NewPost from '../../containers/Blog/NewPost/NewPost';\n\nconst routes = props => (\n    <div>\n        {/*<Route path=\"/\" exact render={() => <Posts />}/>\n                    <Route path=\"/new-post\" exact render={() => <NewPost />}/>*/}\n\n        <Switch>\n            <Route path=\"/new-post\" component={NewPost} />\n            <Route path=\"/posts\" component={Posts} />\n            {/* ':name' is a special dynamic property(route parameter),\n                        since we need to retrieve a specific FullPost \n        <Route path=\"/posts/:id\" exact component={FullPost} />*/}\n        </Switch>\n    </div>\n);\n\nexport default routes;","import React, { Component } from 'react';\n\n// Switch will make sure that only one route is shown on the screen\nimport { Link } from 'react-router-dom'; // NavLink instead of just Link is for inline-shit-styles, which I will not add\n\nimport Routes from '../../components/Routes/Routes';\n\nimport './Blog.css';\n\nclass Blog extends Component {\n\n    render() {\n\n        // You can use as many Routes in a page as you want\n        // eg: <Route path=\"/\" exact render={() => <h1>Home</h1>}/>\n        //     <Route path=\"/\" exact render={() => <h1>Home 2</h1>}/>\n        // use 'render' for messages, 'component' for ...components duh \n        // instead of 'a' tag, use 'Link' for links that lead to other part of the app\n        // so the page won't reload each time a link is clicked\n        return (\n            <div>\n                <header>\n                    <nav>\n                        <ul className=\"Blog__nav-list\">\n                            <li className=\"Blog__nav-list-item\">\n                                <Link\n                                    to=\"/posts/\"\n                                    className=\"Blog__nav-link\">Posts</Link>\n                            </li>\n                            <li className=\"Blog__nav-list-item\">\n                                <Link\n                                    to={\n                                        {\n                                            pathname: '/new-post',\n                                            hash: '#submit',\n                                            search: '?quick-submit=true'\n                                        }\n                                    } className=\"Blog__nav-link\">New Post</Link>\n                            </li>\n                        </ul>\n                    </nav>\n                </header>\n                <Routes />\n            </div>\n        );\n    }\n}\n\nexport default Blog;","import React, { Component } from 'react';\nimport { BrowserRouter} from 'react-router-dom'; \n\nimport Blog from './containers/Blog/Blog';\n\nclass App extends Component {\n  render() {\n    return (\n      //enables React DOM :D, for routing throughout all the app\n      <BrowserRouter>\n        <div className=\"App\">\n          <Blog />\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App />, document.getElementById( 'root' ) );\nregisterServiceWorker();"],"sourceRoot":""}